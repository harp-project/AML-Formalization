# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
## Use a package of configuration called an orb.
#orbs:
#  # Declare a dependency on the welcome-orb
#  welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs

jobs:
  build:
    machine:
      image: ubuntu-2204:current
#    docker:
#      - image: ghcr.io/numtide/nix-unstable-installer/nix:2.12.0pre20220901_4823067
    # The resource_class feature allows configuring CPU and RAM resources for each job.
    # Different resource classes are available for different executors.
    # https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
    steps:
      - run:
          name: "Install dependencies"
          command: |
            sh <(curl -L https://github.com/numtide/nix-unstable-installer/releases/download/nix-2.12.0pre20220901_4823067/install)
            source /home/circleci/.nix-profile/etc/profile.d/nix.sh
            mkdir -p ~/.config/nix/
            echo 'experimental-features = nix-command flakes' >> ~/.config/nix/nix.conf
            nix-channel --add 'https://nixos.org/channels/nixpkgs-unstable' nixpkgs
            nix-channel --update
            nix-env -iA 'nixpkgs.cachix' 'nixpkgs.bash'
            cachix authtoken "${CACHIX_AUTH_TOKEN}"
            cachix use harp-ml-in-coq
            nproc
      - checkout
      - run:
          name: "Build"
          command: |
            source /home/circleci/.nix-profile/etc/profile.d/nix.sh
            cachix watch-exec harp-ml-in-coq -- nix --show-trace --print-build-logs build '.#coq-matching-logic' --no-link
      - run:
          name: "FOL -- Build"
          command: |
            source /home/circleci/.nix-profile/etc/profile.d/nix.sh
            cachix watch-exec harp-ml-in-coq -- nix --show-trace --print-build-logs build '.#coq-matching-logic-example-fol' --no-link
      - run:
          name: "Prover Build & Test"
          command: |
            source /home/circleci/.nix-profile/etc/profile.d/nix.sh
            cachix watch-exec harp-ml-in-coq -- nix --show-trace --print-build-logs build '.#coq-matching-logic-mm-exporter' --no-link
      - run:
          name: "Doc"
          command: |
            source /home/circleci/.nix-profile/etc/profile.d/nix.sh
            cachix watch-exec harp-ml-in-coq -- nix --show-trace --print-build-logs build '.#coq-matching-logic-doc' --out-link './doc-output'
          no_output_timeout: 60m
      - persist_to_workspace:
          root: ./doc-output
          paths: share/doc/coq-matching-logic/doc


  # Inspired by https://circleci.com/blog/deploying-documentation-to-github-pages-with-continuous-integration/
  docs-deploy:
    docker:
      - image: nixos/nix
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      #- run:
      #    name: Install and configure dependencies
      #    command: |
      #      #nix-env -iA 'nixpkgs.ghp-import'
      - add_ssh_keys:
          fingerprints:
            - "e0:63:b6:98:fc:4d:b8:60:86:71:46:dd:e8:be:84:02"
      - run:
          name: Deploy docs to gh-pages branch
          command: |
            git switch gh-pages
            git config user.email "jenda.tusil+ci@gmail.com"
            git config user.name "ci-build"
            rm -rf "./branch/${CIRCLE_BRANCH}/"
            cp -R "/tmp/workspace/share/doc/coq-matching-logic/doc/" "./branch/${CIRCLE_BRANCH}/"
            touch "./branch/${CIRCLE_BRANCH}/.nojekyll"
            git add "./branch/${CIRCLE_BRANCH}"
            git commit --amend -m 'Update documentation'
            git push -f origin gh-pages

workflows:
  # Name the workflow "welcome"
  welcome:
    jobs:
      - build
      - docs-deploy:
          requires:
            - build
          # filters:
          #  branches:
          #    only: master

